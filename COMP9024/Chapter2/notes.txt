# -*- coding: utf-8 -*-
"""
Created on Sat May 25 12:08:18 2019

@author: Michael
"""

"""
2.1.1
Good software implementation:
1. Robustness
to be capable of handling unexpected inputs that are not explicitly defined for its
application.

2. Adaptability
The ability of software to run with minimal change on different hardware and operating
system platforms

3. Reusability
The same code should be usable as a component of different systems in various
applications.
"""

"""
2.1.2
Objective-oriented Design Principle
--------------- 1. Modularity --------------------

In python, a Module is a collection of closely related functions and classes that
are defined in a single file of source code.
using modularity can help with the robustness in terms of testing and debugging.
In addtion, bugs can be easily traced to a particular component.
Moreover, it can help with the reusability.

--------------- 2. Abstraction --------------------
Abstraction is the distill processing of a complex systems to the fundamental parts.
ADT (Abstract Data Type) can be a mathematical model of a data structure
specify the data type
the operations for the data structure
parameter type

duck typing
a tradition mechanism of treating abstractions
No requirments
No compile time
No declaration of abstract base classes

Abstract Base Class (ABC)
Cannot be instantiated  (cannot directly create an instance of that class)
defines one or more common methods
can be realised by concrete class that inherit from the ABC
ABC Module provides formal support for ABCs (even no declaration)

Collections Module
includes definitions of several common data structures.

-------------- 3. Encapsulation --------------------
to ensure that the internal details of the implementations of different components of a software system

advantage
freedom for programmer to maintain the details of a component
without concerning others can change that

Constraint
The public interface for the component has to be maintained

Robustness and Adaptability can be obtained
"""

"""
2.1.3 Design Patterns
A solution to software design problem

Pattern
template for a solution
can be applied to many different situations
describe the main elements of a solution in an abstract way

content of the pattern
a name: identifies the pattern
a context: describes the scenarios for which this pattern can be applied
a template: describes how the pattern is applied
a result: analyses what the pattern produces

"""

"""
2.2 Software development
Traditional software development involves 3 phases
Design - Coding style
Implementation - Naming convension, Formal documentation
Testing and Debugging - unit testing

2.2.1 Design
how to divide working of the program into classes
- how these classes interact
- what data each will store
- what actions each will perform

challenge: How to define classes
rules of thumb:
- responsibilities:
    different actors with action verbs to form the class for the program
- Independence:
    define the work for each class to be as independent from the other as possible
    subdivide responsibilities so that each class has autonomy over aspect from the program
    Give data to the class having the jurisdiction over the actions
- Behaviors:
    define the behaviors for each class so that the consequences of each action will
    be well understood by other classes.
    define the method that the class performs
    set of behaviors for a class are the interface to the class

class with instance variables and methods
can be key to the design of an object-oriented program

Common tool: CRC card (Class-Responsibility-Collaborator)
simple index cards that subdivide the work.
each card can represent a component to become a class
<responsibility><name of each component><collaborator components>
iteration process after all actions are assigned to actors

Unified Modeling Language (UML)
class diagram

2.2.2 Pseudo-Code: to describe algorithm
mixture of natural language and high-level programming constructures
for human readers, not computers


2.2.3 Coding Style and Documentation

-----main principles-----

(1) indentation:
    4 spaces, rather than tab

(2) identifiers:
    * Classes:
        sigular noun
        the first letter of each word is capitalized
    * Functions:
        lowercase verb or sigular noun
        mutiple words: separated by underscores
    * individual objects:
        lowercase noun
        uppercase data sturcture
    * constant values:
        all uppercase nuon
        separated by underscores

(3) Comments:
    "#" character: In-line comments
    triple quotes: multi-line string literals

-----Documentation-----

(1) docstring:
    triple quotes for the first statement with the body of a function, class or Mod.
    multiple lines should be separated by blank lines
    help(x)


2.2.4 Testing and Debugging

-----testing-----
Testing is the process of experimental checking the correctness of a program.

(1) careful testing plan:
    * essential part of writing a program
    * verifying all possible inputs is infeasible
    * executing the program on a representative subset of inputs
    * at minimum, each method of a class is tested at least once
    * better, each statement should be test at least once

(2) Special cases: (special inputs)
    * no length sequence
    * one element
    * all same elements
    * already sorted
    * reverse sorted

(3) Special structure:
    * boundary cases

(4) randomly generated inputs V.S. handcrafted test suites:
    * random module

(5) dependency testing strategies:
    * top-down:
        from top to bottom
        conjunction with stubbing:
            replace a lower-level component with a stub
    * bottom-up:
        from lower-level to higher-level
        unit testing

(6) Module file auto-testing:

    * if __name__ == '__main__':
         # perform tests...

    * unittest module

(7) regression testing:
    previous tests are re-executed to ensure changes to the software do not introduce
    new bugs

-----debugging-----
Debugging is the process of tracking the execution of a program and discovering the
errors in it.

(1) simplest technique: print() statement

(2) a better approach: debugger
    * a specialized environment for controlling and monitoring the execution of a program
    * insersion of breakpoints: programs will stop at each breakpoint, then the value
      can be checked
    * pdb module: debugging support within the interpreter
    * IDEs provide debugging environment with graphical user interfaces

"""

"""
2.3 Class Definitions
primary means for abstraction
class is the carrier of instances (object data)
store the behaviors in member functions (methods)
blueprint: determine the way that state information for each instance is represented
in the form of attributes (fields, instance variables, data members)

2.3.1 Example: CreditCard Class (refering to: CreditCard.py)

Identifier:
    self - each object instance should maintain its own variables
           for a specific instance, self is a hidden parameter
           for the class, self is an explicit parameter
    self._variable - explicit variable assigned from the initial input parameter

Constructor:
    cc = CreditCard('John Doe', '1st Bank', '5319 0375 9387', '5309', 1000)
    to create an instance of the class
    a call of __init__(self, customer, bank, acnt, limit) method

Encapsulation:
    _variable : nonpublic data member
    better enforce a consistent state of all instances

Additional methods:

"""
"""
2.3.4 Iterator

provides a key behavior: __next__

"""
"""
2.4 Inheritance

In order to organize various structural components of a software package:
    hierarchical fashion

example: building > House > Ranch
    House: subset of building
           superset of Ranch
    Is relationship

It is useful:
    general level function: reusable code

mechanism of Object-oriented programming:
    inheritance (module): allows new class to be defined based upon an existing class
    existing class: base; parent or super class
    newly defined class: subclass or child class

Differentiate the subclass
    overrides: specialize an existing behavior (new implementation)

    extend: new methods
"""

"""
2.4.1 Extending the CreditCard Class
subclass of CreditCard:
    (1) if an attempted charge is rejected when exceeding the limit, charge $5
    (2) Annual Percentage Rate

override: existing charge method
extend: process_month

Protected Members
underscore name of value: means it is nonpublic member
general users should not be alowed to access it.

double underscore means the variable is private.
"""
"""
2.4.2 Hierarchy of Numeric Progressions
(1) numeric progression:
    a sequence of numbers where each number depends on one or more of the previous numbers
    arithmetic progression:
        the next number can be determined by adding a fixed constant to the previous value
    geometric progression:
        the next number can be determined by multiplying the previous value by a fixed constant
    they all need a first value and a way of identifying a new value

(2) code implementation
    iterator:
        __next__(self)
        __iter__(self)
    all natral positive integers (0, 1, 2, .....)
    __init__(self, start = 0): the first value is 0
    _advance(self): advance is adding 1
    print_progression(self, n):print previous n many elements in the progression
"""

